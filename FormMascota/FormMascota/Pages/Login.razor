@page "/Login"
@using System.Text.Json
@using System.Text
@inject IRepositorio https;
@inject IMostrarMensajes mostrarMensajes
@inject NavigationManager navigationManager
@using Blazored.LocalStorage;
@inject Blazored.LocalStorage.ILocalStorageService localStore

<PageTitle>Login</PageTitle>

<div class="Fondo-image">
<div class="container-fluid contenedor">
    <div class="Fondo">
   <ul class="nav nav-pills nav-justified mb-3" id="ex1" role="tablist">
  <li class="nav-item" role="presentation">
    <a class="nav-link active" id="tab-login" data-mdb-toggle="pill" href="/Login" role="tab"
      aria-controls="pills-login" aria-selected="true">Login</a>
  </li>
  <li class="nav-item" role="presentation">
    <a class="nav-link" id="tab-register" data-mdb-toggle="pill" href="/Registro" role="tab"
      aria-controls="pills-register" aria-selected="false">Register</a>
  </li>
</ul>
<div class="tab-content">
  <div class="tab-pane fade show active" id="pills-login" role="tabpanel" aria-labelledby="tab-login">
    <EditForm Model="DatosUsers" OnValidSubmit="LoginF" >
      <div class="form-outline mb-4">
        <input type="email" @bind="EmailUser" id="loginName" class="form-control" />
        <label class="form-label" for="loginName">Email or username</label>
      </div>
      <div class="form-outline mb-4">
        <input type="password" @bind="PasswordUser" id="loginPassword" class="form-control" />
        <label class="form-label" for="loginPassword">Password</label>
      </div>

      <button type="submit"  class="btn btn-primary btn-block mb-4">Sign in</button>
   </EditForm>
  </div>
  </div>
</div>
</div>
</div>


@code {
    private LoginDTO DatosUsers = new();
    private LoginRespuestaDTO RespuestaUsers = new();


    private string? EmailUser;
    private string? PasswordUser;
    private async Task LoginF()
    {
       
            var Datos = new LoginDTO { usuario = EmailUser, contrasenia = PasswordUser };
            var result = await https.Post<LoginDTO, LoginRespuestaDTO>("https://buscaperroapi.azurewebsites.net/api/Autentificacion/Login", Datos);
            RespuestaUsers = result.Response;
            AuthUser Auth = new();
            if (Auth.Authentication(RespuestaUsers))
            {
                
                await localStore.SetItemAsync("ID_USER", RespuestaUsers.id_cuenta);
                navigationManager.NavigateTo("/mascota");
            }
            else
            {
                await mostrarMensajes.MostrarMensajeError("Inicio no valido.");
                await localStore.ClearAsync();
            }
       
    } protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await localStore.ClearAsync();
            StateHasChanged();
        }
    }

}
